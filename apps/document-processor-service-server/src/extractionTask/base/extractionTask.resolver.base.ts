/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { ExtractionTask } from "./ExtractionTask";
import { ExtractionTaskCountArgs } from "./ExtractionTaskCountArgs";
import { ExtractionTaskFindManyArgs } from "./ExtractionTaskFindManyArgs";
import { ExtractionTaskFindUniqueArgs } from "./ExtractionTaskFindUniqueArgs";
import { DeleteExtractionTaskArgs } from "./DeleteExtractionTaskArgs";
import { ExtractionTaskService } from "../extractionTask.service";
@graphql.Resolver(() => ExtractionTask)
export class ExtractionTaskResolverBase {
  constructor(protected readonly service: ExtractionTaskService) {}

  async _extractionTasksMeta(
    @graphql.Args() args: ExtractionTaskCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ExtractionTask])
  async extractionTasks(
    @graphql.Args() args: ExtractionTaskFindManyArgs
  ): Promise<ExtractionTask[]> {
    return this.service.extractionTasks(args);
  }

  @graphql.Query(() => ExtractionTask, { nullable: true })
  async extractionTask(
    @graphql.Args() args: ExtractionTaskFindUniqueArgs
  ): Promise<ExtractionTask | null> {
    const result = await this.service.extractionTask(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ExtractionTask)
  async deleteExtractionTask(
    @graphql.Args() args: DeleteExtractionTaskArgs
  ): Promise<ExtractionTask | null> {
    try {
      return await this.service.deleteExtractionTask(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
