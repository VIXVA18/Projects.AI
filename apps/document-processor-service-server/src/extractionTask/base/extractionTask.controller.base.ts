/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ExtractionTaskService } from "../extractionTask.service";
import { ExtractionTaskCreateInput } from "./ExtractionTaskCreateInput";
import { ExtractionTask } from "./ExtractionTask";
import { ExtractionTaskFindManyArgs } from "./ExtractionTaskFindManyArgs";
import { ExtractionTaskWhereUniqueInput } from "./ExtractionTaskWhereUniqueInput";
import { ExtractionTaskUpdateInput } from "./ExtractionTaskUpdateInput";

export class ExtractionTaskControllerBase {
  constructor(protected readonly service: ExtractionTaskService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ExtractionTask })
  async createExtractionTask(
    @common.Body() data: ExtractionTaskCreateInput
  ): Promise<ExtractionTask> {
    return await this.service.createExtractionTask({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ExtractionTask] })
  @ApiNestedQuery(ExtractionTaskFindManyArgs)
  async extractionTasks(
    @common.Req() request: Request
  ): Promise<ExtractionTask[]> {
    const args = plainToClass(ExtractionTaskFindManyArgs, request.query);
    return this.service.extractionTasks({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ExtractionTask })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async extractionTask(
    @common.Param() params: ExtractionTaskWhereUniqueInput
  ): Promise<ExtractionTask | null> {
    const result = await this.service.extractionTask({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ExtractionTask })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateExtractionTask(
    @common.Param() params: ExtractionTaskWhereUniqueInput,
    @common.Body() data: ExtractionTaskUpdateInput
  ): Promise<ExtractionTask | null> {
    try {
      return await this.service.updateExtractionTask({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ExtractionTask })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteExtractionTask(
    @common.Param() params: ExtractionTaskWhereUniqueInput
  ): Promise<ExtractionTask | null> {
    try {
      return await this.service.deleteExtractionTask({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
