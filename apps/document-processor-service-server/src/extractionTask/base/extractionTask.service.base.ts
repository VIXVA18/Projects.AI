/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, ExtractionTask as PrismaExtractionTask } from "@prisma/client";

export class ExtractionTaskServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ExtractionTaskCountArgs, "select">
  ): Promise<number> {
    return this.prisma.extractionTask.count(args);
  }

  async extractionTasks<T extends Prisma.ExtractionTaskFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.ExtractionTaskFindManyArgs>
  ): Promise<PrismaExtractionTask[]> {
    return this.prisma.extractionTask.findMany<Prisma.ExtractionTaskFindManyArgs>(
      args
    );
  }
  async extractionTask<T extends Prisma.ExtractionTaskFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.ExtractionTaskFindUniqueArgs>
  ): Promise<PrismaExtractionTask | null> {
    return this.prisma.extractionTask.findUnique(args);
  }
  async createExtractionTask<T extends Prisma.ExtractionTaskCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ExtractionTaskCreateArgs>
  ): Promise<PrismaExtractionTask> {
    return this.prisma.extractionTask.create<T>(args);
  }
  async updateExtractionTask<T extends Prisma.ExtractionTaskUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ExtractionTaskUpdateArgs>
  ): Promise<PrismaExtractionTask> {
    return this.prisma.extractionTask.update<T>(args);
  }
  async deleteExtractionTask<T extends Prisma.ExtractionTaskDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.ExtractionTaskDeleteArgs>
  ): Promise<PrismaExtractionTask> {
    return this.prisma.extractionTask.delete(args);
  }
}
