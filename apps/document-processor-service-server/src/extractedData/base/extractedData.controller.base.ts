/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ExtractedDataService } from "../extractedData.service";
import { ExtractedDataCreateInput } from "./ExtractedDataCreateInput";
import { ExtractedData } from "./ExtractedData";
import { ExtractedDataFindManyArgs } from "./ExtractedDataFindManyArgs";
import { ExtractedDataWhereUniqueInput } from "./ExtractedDataWhereUniqueInput";
import { ExtractedDataUpdateInput } from "./ExtractedDataUpdateInput";

export class ExtractedDataControllerBase {
  constructor(protected readonly service: ExtractedDataService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ExtractedData })
  async createExtractedData(
    @common.Body() data: ExtractedDataCreateInput
  ): Promise<ExtractedData> {
    return await this.service.createExtractedData({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ExtractedData] })
  @ApiNestedQuery(ExtractedDataFindManyArgs)
  async extractedDataItems(
    @common.Req() request: Request
  ): Promise<ExtractedData[]> {
    const args = plainToClass(ExtractedDataFindManyArgs, request.query);
    return this.service.extractedDataItems({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ExtractedData })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async extractedData(
    @common.Param() params: ExtractedDataWhereUniqueInput
  ): Promise<ExtractedData | null> {
    const result = await this.service.extractedData({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ExtractedData })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateExtractedData(
    @common.Param() params: ExtractedDataWhereUniqueInput,
    @common.Body() data: ExtractedDataUpdateInput
  ): Promise<ExtractedData | null> {
    try {
      return await this.service.updateExtractedData({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ExtractedData })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteExtractedData(
    @common.Param() params: ExtractedDataWhereUniqueInput
  ): Promise<ExtractedData | null> {
    try {
      return await this.service.deleteExtractedData({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
